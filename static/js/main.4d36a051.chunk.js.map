{"version":3,"sources":["components/monster-card.jsx","monster/monster.js","reportWebVitals.js","index.js"],"names":["Card","prop","className","alt","src","monster","id","name","email","MonsterCard","props","monsters","map","i","Monster","onButtonClick","onTextChange","e","_filter","target","value","setState","filter","state","fetch","then","resp","a","json","result","console","log","this","filtered","toLowerCase","includes","type","onChange","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAKA,SAASA,EAAKC,GAEV,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAKI,QAAQC,GAAvC,4BACtB,mCAAOL,EAAKI,QAAQE,KAApB,OACA,4BAAIN,EAAKI,QAAQG,WAIV,SAASC,EAAYC,GAEhC,OAAO,qBAAKR,UAAU,YAAf,SACFQ,EAAMC,SAASC,KAAI,SAACP,EAASQ,GAAV,OAChB,cAACb,EAAD,CAAcK,QAASA,GAAZQ,Q,IC6BRC,E,kDA7CX,aAAc,IAAD,8BACT,gBAOJC,cAAgB,aARH,EAqBbC,aAAe,SAACC,GACZ,IAAIC,EAAUD,EAAEE,OAAOC,MACvB,EAAKC,SAAS,CAACC,OAAOJ,KArBtB,EAAKK,MAAO,CACRZ,SAAW,GACXW,OAAQ,IAJH,E,qDAYb,WAAoB,IAAD,OAEfE,MADU,8CACCC,KAAX,uCAAgB,WAAOC,GAAP,eAAAC,EAAA,sEACSD,EAAKE,OADd,OACNC,EADM,OAGZ,EAAKR,SAAS,CAACV,SAASkB,IACxBC,QAAQC,IAAIF,GAJA,2CAAhB,yD,oBAaJ,WAAS,IAAD,OACJ,EAA4BG,KAAKT,MAA1BZ,EAAP,EAAOA,SAAUW,EAAjB,EAAiBA,OACbW,EAAYtB,EAASW,QAAO,SAACjB,GAC7B,OAAOA,EAAQE,KAAK2B,cAAcC,SAASb,EAAOY,kBAGtD,OAAQ,8BAEJ,sBAAKhC,UAAU,MAAf,UACI,8BAAG,0BAAe,uBAAOkC,KAAK,OAAOhB,MAAOY,KAAKT,MAAMD,OAAQe,SAAU,SAACpB,GAAD,OAAO,EAAKD,aAAaC,SAGlG,cAACR,EAAD,CAAaE,SAAUsB,a,GAxCjBK,aCUPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4d36a051.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport './monster-card.css'\r\n//import Card from './monster-card-content'\r\n\r\nfunction Card(prop){\r\n    //console.log(\"card-cc => \", prop.monster);\r\n    return (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${prop.monster.id}?set=set2&size=180x180`} />\r\n        <h1 > {prop.monster.name} </h1>\r\n        <p>{prop.monster.email}</p>\r\n    </div>)\r\n}\r\n\r\nexport default function MonsterCard(props){\r\n \r\n    return <div className='card-list'> \r\n        {props.monsters.map((monster, i) => (\r\n            <Card key={i} monster={monster}/> \r\n        ))}\r\n     </div>\r\n}","import {Component} from 'react'\r\nimport MonsterCard from '../components/monster-card'\r\nclass Monster extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state= {\r\n            monsters : [],\r\n            filter :''\r\n        }\r\n    }  \r\n    \r\n    onButtonClick = () => {\r\n      \r\n    }\r\n\r\n    componentDidMount(){\r\n        var url = 'https://jsonplaceholder.typicode.com/users';\r\n        fetch(url).then(async (resp) => {\r\n            const result = await resp.json();\r\n            // const result = JSON.parse(result);\r\n            this.setState({monsters:result})\r\n            console.log(result);\r\n        })\r\n    }\r\n    onTextChange = (e) => {\r\n        let _filter = e.target.value;\r\n        this.setState({filter:_filter})\r\n\r\n       \r\n    }\r\n    render(){\r\n        const {monsters, filter } = this.state;\r\n        let filtered =  monsters.filter((monster) => {\r\n            return monster.name.toLowerCase().includes(filter.toLowerCase())\r\n        })\r\n        \r\n        return (<div>\r\n           \r\n            <div className='App'>\r\n                <p><label></label><input type='text' value={this.state.filter} onChange={(e) => this.onTextChange(e)}/>\r\n                </p>\r\n                {/* <button onClick={this.onButtonClick}>Click</button> */}\r\n                <MonsterCard monsters={filtered}/>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Monster;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import App from './App';\nimport Monster from './monster/monster';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Monster />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}